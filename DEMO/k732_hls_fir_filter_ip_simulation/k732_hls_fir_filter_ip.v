// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="k732_hls_fir_filter_ip,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.794000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=746,HLS_SYN_LUT=755,HLS_VERSION=2019_2}" *)

module k732_hls_fir_filter_ip (
        ap_clk,
        ap_rst,
        input_r,
        fir_time,
        output_r,
        result_valid
);

parameter    ap_ST_fsm_state1 = 46'd1;
parameter    ap_ST_fsm_state2 = 46'd2;
parameter    ap_ST_fsm_state3 = 46'd4;
parameter    ap_ST_fsm_state4 = 46'd8;
parameter    ap_ST_fsm_state5 = 46'd16;
parameter    ap_ST_fsm_state6 = 46'd32;
parameter    ap_ST_fsm_state7 = 46'd64;
parameter    ap_ST_fsm_state8 = 46'd128;
parameter    ap_ST_fsm_state9 = 46'd256;
parameter    ap_ST_fsm_state10 = 46'd512;
parameter    ap_ST_fsm_state11 = 46'd1024;
parameter    ap_ST_fsm_state12 = 46'd2048;
parameter    ap_ST_fsm_state13 = 46'd4096;
parameter    ap_ST_fsm_state14 = 46'd8192;
parameter    ap_ST_fsm_state15 = 46'd16384;
parameter    ap_ST_fsm_state16 = 46'd32768;
parameter    ap_ST_fsm_state17 = 46'd65536;
parameter    ap_ST_fsm_state18 = 46'd131072;
parameter    ap_ST_fsm_state19 = 46'd262144;
parameter    ap_ST_fsm_state20 = 46'd524288;
parameter    ap_ST_fsm_state21 = 46'd1048576;
parameter    ap_ST_fsm_state22 = 46'd2097152;
parameter    ap_ST_fsm_state23 = 46'd4194304;
parameter    ap_ST_fsm_state24 = 46'd8388608;
parameter    ap_ST_fsm_state25 = 46'd16777216;
parameter    ap_ST_fsm_state26 = 46'd33554432;
parameter    ap_ST_fsm_state27 = 46'd67108864;
parameter    ap_ST_fsm_state28 = 46'd134217728;
parameter    ap_ST_fsm_state29 = 46'd268435456;
parameter    ap_ST_fsm_state30 = 46'd536870912;
parameter    ap_ST_fsm_state31 = 46'd1073741824;
parameter    ap_ST_fsm_state32 = 46'd2147483648;
parameter    ap_ST_fsm_state33 = 46'd4294967296;
parameter    ap_ST_fsm_state34 = 46'd8589934592;
parameter    ap_ST_fsm_state35 = 46'd17179869184;
parameter    ap_ST_fsm_state36 = 46'd34359738368;
parameter    ap_ST_fsm_state37 = 46'd68719476736;
parameter    ap_ST_fsm_state38 = 46'd137438953472;
parameter    ap_ST_fsm_state39 = 46'd274877906944;
parameter    ap_ST_fsm_state40 = 46'd549755813888;
parameter    ap_ST_fsm_state41 = 46'd1099511627776;
parameter    ap_ST_fsm_state42 = 46'd2199023255552;
parameter    ap_ST_fsm_state43 = 46'd4398046511104;
parameter    ap_ST_fsm_state44 = 46'd8796093022208;
parameter    ap_ST_fsm_state45 = 46'd17592186044416;
parameter    ap_ST_fsm_state46 = 46'd35184372088832;

input   ap_clk;
input   ap_rst;
input  [31:0] input_r;
input  [7:0] fir_time;
output  [31:0] output_r;
output  [7:0] result_valid;

reg   [31:0] filter_ptr;
reg   [7:0] buffer_in_address0;
reg    buffer_in_ce0;
reg    buffer_in_we0;
wire   [31:0] buffer_in_q0;
reg   [0:0] result_valid_flag;
wire   [0:0] icmp_ln19_fu_152_p2;
reg   [0:0] icmp_ln19_reg_280;
(* fsm_encoding = "none" *) reg   [45:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] select_ln26_fu_164_p3;
reg   [7:0] select_ln26_reg_284;
wire   [8:0] zext_ln26_fu_172_p1;
reg   [8:0] zext_ln26_reg_289;
reg  signed [31:0] filter_ptr_load_reg_294;
wire   [7:0] select_ln28_fu_191_p3;
reg   [7:0] select_ln28_reg_299;
wire   [7:0] i_fu_204_p2;
reg   [7:0] i_reg_307;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln28_fu_199_p2;
wire   [31:0] add_ln29_fu_215_p2;
wire   [39:0] tmp_add_value_fu_254_p2;
wire    ap_CS_fsm_state3;
reg   [39:0] tmp_add_value_0_reg_106;
reg   [7:0] i_0_reg_118;
reg   [31:0] filter_ptr_new_0_reg_129;
wire   [0:0] icmp_ln30_fu_229_p2;
wire   [31:0] trunc_ln36_fu_275_p1;
reg   [31:0] ap_phi_mux_storemerge_phi_fu_144_p4;
reg   [31:0] storemerge_reg_140;
wire    ap_CS_fsm_state46;
wire  signed [63:0] sext_ln27_fu_180_p1;
wire   [63:0] zext_ln28_fu_210_p1;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln26_fu_158_p2;
wire  signed [31:0] sext_ln27_fu_180_p0;
wire   [0:0] empty_fu_185_p2;
wire   [8:0] add_ln30_fu_220_p2;
wire  signed [31:0] sext_ln30_fu_225_p1;
wire   [7:0] grp_fu_244_p1;
wire   [39:0] zext_ln28_1_fu_250_p1;
wire   [31:0] grp_fu_244_p2;
reg    grp_fu_244_ap_start;
wire    grp_fu_244_ap_done;
reg   [45:0] ap_NS_fsm;
wire   [39:0] grp_fu_244_p10;

// power-on initialization
initial begin
#0 filter_ptr = 32'd0;
#0 result_valid_flag = 1'd0;
#0 ap_CS_fsm = 46'd1;
end

k732_hls_fir_filtbkb #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
buffer_in_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buffer_in_address0),
    .ce0(buffer_in_ce0),
    .we0(buffer_in_we0),
    .d0(input_r),
    .q0(buffer_in_q0)
);

k732_hls_fir_filtcud #(
    .ID( 1 ),
    .NUM_STAGE( 44 ),
    .din0_WIDTH( 40 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 32 ))
k732_hls_fir_filtcud_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_244_ap_start),
    .done(grp_fu_244_ap_done),
    .din0(tmp_add_value_0_reg_106),
    .din1(grp_fu_244_p1),
    .ce(1'b1),
    .dout(grp_fu_244_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_fu_199_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        if ((icmp_ln30_fu_229_p2 == 1'd0)) begin
            filter_ptr_new_0_reg_129 <= add_ln29_fu_215_p2;
        end else if ((icmp_ln30_fu_229_p2 == 1'd1)) begin
            filter_ptr_new_0_reg_129 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_118 <= i_reg_307;
    end else if (((icmp_ln19_fu_152_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_118 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_152_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        storemerge_reg_140 <= 32'd0;
    end else if (((icmp_ln19_reg_280 == 1'd0) & (1'b1 == ap_CS_fsm_state46))) begin
        storemerge_reg_140 <= trunc_ln36_fu_275_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_add_value_0_reg_106 <= tmp_add_value_fu_254_p2;
    end else if (((icmp_ln19_fu_152_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_add_value_0_reg_106 <= 40'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        filter_ptr <= filter_ptr_new_0_reg_129;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_152_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_ptr_load_reg_294 <= filter_ptr;
        select_ln26_reg_284 <= select_ln26_fu_164_p3;
        select_ln28_reg_299 <= select_ln28_fu_191_p3;
        zext_ln26_reg_289[7 : 0] <= zext_ln26_fu_172_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_307 <= i_fu_204_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln19_reg_280 <= icmp_ln19_fu_152_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_fu_199_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln30_fu_229_p2 == 1'd1))) begin
        result_valid_flag <= 1'd1;
    end
end

always @ (*) begin
    if (((icmp_ln19_reg_280 == 1'd0) & (1'b1 == ap_CS_fsm_state46))) begin
        ap_phi_mux_storemerge_phi_fu_144_p4 = trunc_ln36_fu_275_p1;
    end else begin
        ap_phi_mux_storemerge_phi_fu_144_p4 = storemerge_reg_140;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        buffer_in_address0 = zext_ln28_fu_210_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        buffer_in_address0 = sext_ln27_fu_180_p1;
    end else begin
        buffer_in_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        buffer_in_ce0 = 1'b1;
    end else begin
        buffer_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln19_fu_152_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        buffer_in_we0 = 1'b1;
    end else begin
        buffer_in_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln28_fu_199_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        grp_fu_244_ap_start = 1'b1;
    end else begin
        grp_fu_244_ap_start = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln19_fu_152_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln28_fu_199_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln29_fu_215_p2 = ($signed(filter_ptr_load_reg_294) + $signed(32'd1));

assign add_ln30_fu_220_p2 = ($signed(zext_ln26_reg_289) + $signed(9'd511));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign empty_fu_185_p2 = ((fir_time < 8'd200) ? 1'b1 : 1'b0);

assign grp_fu_244_p1 = grp_fu_244_p10;

assign grp_fu_244_p10 = select_ln26_reg_284;

assign i_fu_204_p2 = (i_0_reg_118 + 8'd1);

assign icmp_ln19_fu_152_p2 = ((fir_time == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_158_p2 = ((fir_time > 8'd200) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_199_p2 = ((i_0_reg_118 == select_ln28_reg_299) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_229_p2 = (($signed(add_ln29_fu_215_p2) > $signed(sext_ln30_fu_225_p1)) ? 1'b1 : 1'b0);

assign output_r = ap_phi_mux_storemerge_phi_fu_144_p4;

assign result_valid = result_valid_flag;

assign select_ln26_fu_164_p3 = ((icmp_ln26_fu_158_p2[0:0] === 1'b1) ? 8'd200 : fir_time);

assign select_ln28_fu_191_p3 = ((empty_fu_185_p2[0:0] === 1'b1) ? fir_time : 8'd200);

assign sext_ln27_fu_180_p0 = filter_ptr;

assign sext_ln27_fu_180_p1 = sext_ln27_fu_180_p0;

assign sext_ln30_fu_225_p1 = $signed(add_ln30_fu_220_p2);

assign tmp_add_value_fu_254_p2 = (zext_ln28_1_fu_250_p1 + tmp_add_value_0_reg_106);

assign trunc_ln36_fu_275_p1 = grp_fu_244_p2[31:0];

assign zext_ln26_fu_172_p1 = select_ln26_fu_164_p3;

assign zext_ln28_1_fu_250_p1 = buffer_in_q0;

assign zext_ln28_fu_210_p1 = i_0_reg_118;

always @ (posedge ap_clk) begin
    zext_ln26_reg_289[8] <= 1'b0;
end

endmodule //k732_hls_fir_filter_ip
