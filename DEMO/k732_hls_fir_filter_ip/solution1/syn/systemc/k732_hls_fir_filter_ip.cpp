// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "k732_hls_fir_filter_ip.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic k732_hls_fir_filter_ip::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic k732_hls_fir_filter_ip::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state1 = "1";
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state2 = "10";
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state3 = "100";
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state4 = "1000";
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state5 = "10000";
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state6 = "100000";
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state7 = "1000000";
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state8 = "10000000";
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state9 = "100000000";
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state10 = "1000000000";
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state11 = "10000000000";
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state12 = "100000000000";
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state42 = "100000000000000000000000000000000000000000";
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state43 = "1000000000000000000000000000000000000000000";
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state44 = "10000000000000000000000000000000000000000000";
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state45 = "100000000000000000000000000000000000000000000";
const sc_lv<46> k732_hls_fir_filter_ip::ap_ST_fsm_state46 = "1000000000000000000000000000000000000000000000";
const sc_lv<32> k732_hls_fir_filter_ip::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> k732_hls_fir_filter_ip::ap_const_lv1_0 = "0";
const sc_lv<32> k732_hls_fir_filter_ip::ap_const_lv32_1 = "1";
const sc_lv<1> k732_hls_fir_filter_ip::ap_const_lv1_1 = "1";
const sc_lv<32> k732_hls_fir_filter_ip::ap_const_lv32_2 = "10";
const sc_lv<40> k732_hls_fir_filter_ip::ap_const_lv40_0 = "0000000000000000000000000000000000000000";
const sc_lv<8> k732_hls_fir_filter_ip::ap_const_lv8_0 = "00000000";
const sc_lv<32> k732_hls_fir_filter_ip::ap_const_lv32_2D = "101101";
const sc_lv<32> k732_hls_fir_filter_ip::ap_const_lv32_3 = "11";
const sc_lv<8> k732_hls_fir_filter_ip::ap_const_lv8_C8 = "11001000";
const sc_lv<8> k732_hls_fir_filter_ip::ap_const_lv8_1 = "1";
const sc_lv<9> k732_hls_fir_filter_ip::ap_const_lv9_1FF = "111111111";
const bool k732_hls_fir_filter_ip::ap_const_boolean_1 = true;

k732_hls_fir_filter_ip::k732_hls_fir_filter_ip(sc_module_name name) : sc_module(name), mVcdFile(0) {
    buffer_in_U = new k732_hls_fir_filtbkb("buffer_in_U");
    buffer_in_U->clk(ap_clk);
    buffer_in_U->reset(ap_rst);
    buffer_in_U->address0(buffer_in_address0);
    buffer_in_U->ce0(buffer_in_ce0);
    buffer_in_U->we0(buffer_in_we0);
    buffer_in_U->d0(input_r);
    buffer_in_U->q0(buffer_in_q0);
    k732_hls_fir_filtcud_U1 = new k732_hls_fir_filtcud<1,44,40,8,32>("k732_hls_fir_filtcud_U1");
    k732_hls_fir_filtcud_U1->clk(ap_clk);
    k732_hls_fir_filtcud_U1->reset(ap_rst);
    k732_hls_fir_filtcud_U1->start(grp_fu_244_ap_start);
    k732_hls_fir_filtcud_U1->done(grp_fu_244_ap_done);
    k732_hls_fir_filtcud_U1->din0(tmp_add_value_0_reg_106);
    k732_hls_fir_filtcud_U1->din1(grp_fu_244_p1);
    k732_hls_fir_filtcud_U1->ce(ap_var_for_const0);
    k732_hls_fir_filtcud_U1->dout(grp_fu_244_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln29_fu_215_p2);
    sensitive << ( filter_ptr_load_reg_294 );

    SC_METHOD(thread_add_ln30_fu_220_p2);
    sensitive << ( zext_ln26_reg_289 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state46);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_phi_mux_storemerge_phi_fu_144_p4);
    sensitive << ( icmp_ln19_reg_280 );
    sensitive << ( trunc_ln36_fu_275_p1 );
    sensitive << ( storemerge_reg_140 );
    sensitive << ( ap_CS_fsm_state46 );

    SC_METHOD(thread_buffer_in_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( sext_ln27_fu_180_p1 );
    sensitive << ( zext_ln28_fu_210_p1 );

    SC_METHOD(thread_buffer_in_ce0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_buffer_in_we0);
    sensitive << ( icmp_ln19_fu_152_p2 );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_empty_fu_185_p2);
    sensitive << ( fir_time );
    sensitive << ( icmp_ln19_fu_152_p2 );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_grp_fu_244_ap_start);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln28_fu_199_p2 );

    SC_METHOD(thread_grp_fu_244_p1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_fu_244_p10 );

    SC_METHOD(thread_grp_fu_244_p10);
    sensitive << ( select_ln26_reg_284 );

    SC_METHOD(thread_i_fu_204_p2);
    sensitive << ( i_0_reg_118 );

    SC_METHOD(thread_icmp_ln19_fu_152_p2);
    sensitive << ( fir_time );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_icmp_ln26_fu_158_p2);
    sensitive << ( fir_time );
    sensitive << ( icmp_ln19_fu_152_p2 );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_icmp_ln28_fu_199_p2);
    sensitive << ( select_ln28_reg_299 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_118 );

    SC_METHOD(thread_icmp_ln30_fu_229_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln28_fu_199_p2 );
    sensitive << ( add_ln29_fu_215_p2 );
    sensitive << ( sext_ln30_fu_225_p1 );

    SC_METHOD(thread_output_r);
    sensitive << ( ap_phi_mux_storemerge_phi_fu_144_p4 );
    sensitive << ( ap_CS_fsm_state46 );

    SC_METHOD(thread_result_valid);
    sensitive << ( result_valid_flag );
    sensitive << ( icmp_ln19_reg_280 );
    sensitive << ( ap_CS_fsm_state46 );

    SC_METHOD(thread_select_ln26_fu_164_p3);
    sensitive << ( fir_time );
    sensitive << ( icmp_ln26_fu_158_p2 );

    SC_METHOD(thread_select_ln28_fu_191_p3);
    sensitive << ( fir_time );
    sensitive << ( empty_fu_185_p2 );

    SC_METHOD(thread_sext_ln27_fu_180_p0);
    sensitive << ( filter_ptr );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_sext_ln27_fu_180_p1);
    sensitive << ( sext_ln27_fu_180_p0 );

    SC_METHOD(thread_sext_ln30_fu_225_p1);
    sensitive << ( add_ln30_fu_220_p2 );

    SC_METHOD(thread_tmp_add_value_fu_254_p2);
    sensitive << ( tmp_add_value_0_reg_106 );
    sensitive << ( zext_ln28_1_fu_250_p1 );

    SC_METHOD(thread_trunc_ln36_fu_275_p1);
    sensitive << ( grp_fu_244_p2 );

    SC_METHOD(thread_zext_ln26_fu_172_p1);
    sensitive << ( select_ln26_fu_164_p3 );

    SC_METHOD(thread_zext_ln28_1_fu_250_p1);
    sensitive << ( buffer_in_q0 );

    SC_METHOD(thread_zext_ln28_fu_210_p1);
    sensitive << ( i_0_reg_118 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( icmp_ln19_fu_152_p2 );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln28_fu_199_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    filter_ptr = "00000000000000000000000000000000";
    result_valid_flag = "0";
    ap_CS_fsm = "0000000000000000000000000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "k732_hls_fir_filter_ip_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, input_r, "(port)input_r");
    sc_trace(mVcdFile, fir_time, "(port)fir_time");
    sc_trace(mVcdFile, output_r, "(port)output_r");
    sc_trace(mVcdFile, result_valid, "(port)result_valid");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, filter_ptr, "filter_ptr");
    sc_trace(mVcdFile, buffer_in_address0, "buffer_in_address0");
    sc_trace(mVcdFile, buffer_in_ce0, "buffer_in_ce0");
    sc_trace(mVcdFile, buffer_in_we0, "buffer_in_we0");
    sc_trace(mVcdFile, buffer_in_q0, "buffer_in_q0");
    sc_trace(mVcdFile, result_valid_flag, "result_valid_flag");
    sc_trace(mVcdFile, icmp_ln19_fu_152_p2, "icmp_ln19_fu_152_p2");
    sc_trace(mVcdFile, icmp_ln19_reg_280, "icmp_ln19_reg_280");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, select_ln26_fu_164_p3, "select_ln26_fu_164_p3");
    sc_trace(mVcdFile, select_ln26_reg_284, "select_ln26_reg_284");
    sc_trace(mVcdFile, zext_ln26_fu_172_p1, "zext_ln26_fu_172_p1");
    sc_trace(mVcdFile, zext_ln26_reg_289, "zext_ln26_reg_289");
    sc_trace(mVcdFile, filter_ptr_load_reg_294, "filter_ptr_load_reg_294");
    sc_trace(mVcdFile, select_ln28_fu_191_p3, "select_ln28_fu_191_p3");
    sc_trace(mVcdFile, select_ln28_reg_299, "select_ln28_reg_299");
    sc_trace(mVcdFile, i_fu_204_p2, "i_fu_204_p2");
    sc_trace(mVcdFile, i_reg_307, "i_reg_307");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln28_fu_199_p2, "icmp_ln28_fu_199_p2");
    sc_trace(mVcdFile, add_ln29_fu_215_p2, "add_ln29_fu_215_p2");
    sc_trace(mVcdFile, tmp_add_value_fu_254_p2, "tmp_add_value_fu_254_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_add_value_0_reg_106, "tmp_add_value_0_reg_106");
    sc_trace(mVcdFile, i_0_reg_118, "i_0_reg_118");
    sc_trace(mVcdFile, filter_ptr_new_0_reg_129, "filter_ptr_new_0_reg_129");
    sc_trace(mVcdFile, icmp_ln30_fu_229_p2, "icmp_ln30_fu_229_p2");
    sc_trace(mVcdFile, trunc_ln36_fu_275_p1, "trunc_ln36_fu_275_p1");
    sc_trace(mVcdFile, ap_phi_mux_storemerge_phi_fu_144_p4, "ap_phi_mux_storemerge_phi_fu_144_p4");
    sc_trace(mVcdFile, storemerge_reg_140, "storemerge_reg_140");
    sc_trace(mVcdFile, ap_CS_fsm_state46, "ap_CS_fsm_state46");
    sc_trace(mVcdFile, sext_ln27_fu_180_p1, "sext_ln27_fu_180_p1");
    sc_trace(mVcdFile, zext_ln28_fu_210_p1, "zext_ln28_fu_210_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, icmp_ln26_fu_158_p2, "icmp_ln26_fu_158_p2");
    sc_trace(mVcdFile, sext_ln27_fu_180_p0, "sext_ln27_fu_180_p0");
    sc_trace(mVcdFile, empty_fu_185_p2, "empty_fu_185_p2");
    sc_trace(mVcdFile, add_ln30_fu_220_p2, "add_ln30_fu_220_p2");
    sc_trace(mVcdFile, sext_ln30_fu_225_p1, "sext_ln30_fu_225_p1");
    sc_trace(mVcdFile, grp_fu_244_p1, "grp_fu_244_p1");
    sc_trace(mVcdFile, zext_ln28_1_fu_250_p1, "zext_ln28_1_fu_250_p1");
    sc_trace(mVcdFile, grp_fu_244_p2, "grp_fu_244_p2");
    sc_trace(mVcdFile, grp_fu_244_ap_start, "grp_fu_244_ap_start");
    sc_trace(mVcdFile, grp_fu_244_ap_done, "grp_fu_244_ap_done");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, grp_fu_244_p10, "grp_fu_244_p10");
#endif

    }
    mHdltvinHandle.open("k732_hls_fir_filter_ip.hdltvin.dat");
    mHdltvoutHandle.open("k732_hls_fir_filter_ip.hdltvout.dat");
}

k732_hls_fir_filter_ip::~k732_hls_fir_filter_ip() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete buffer_in_U;
    delete k732_hls_fir_filtcud_U1;
}

void k732_hls_fir_filter_ip::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void k732_hls_fir_filter_ip::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln28_fu_199_p2.read(), ap_const_lv1_1))) {
        if (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln30_fu_229_p2.read())) {
            filter_ptr_new_0_reg_129 = add_ln29_fu_215_p2.read();
        } else if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln30_fu_229_p2.read())) {
            filter_ptr_new_0_reg_129 = ap_const_lv32_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_0_reg_118 = i_reg_307.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln19_fu_152_p2.read()))) {
        i_0_reg_118 = ap_const_lv8_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(icmp_ln19_fu_152_p2.read(), ap_const_lv1_1))) {
        storemerge_reg_140 = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln19_reg_280.read()))) {
        storemerge_reg_140 = trunc_ln36_fu_275_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        tmp_add_value_0_reg_106 = tmp_add_value_fu_254_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln19_fu_152_p2.read()))) {
        tmp_add_value_0_reg_106 = ap_const_lv40_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        filter_ptr = filter_ptr_new_0_reg_129.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln19_fu_152_p2.read()))) {
        filter_ptr_load_reg_294 = filter_ptr.read();
        select_ln26_reg_284 = select_ln26_fu_164_p3.read();
        select_ln28_reg_299 = select_ln28_fu_191_p3.read();
        zext_ln26_reg_289 = zext_ln26_fu_172_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_307 = i_fu_204_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        icmp_ln19_reg_280 = icmp_ln19_fu_152_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln28_fu_199_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln30_fu_229_p2.read()))) {
        result_valid_flag = ap_const_lv1_1;
    }
}

void k732_hls_fir_filter_ip::thread_add_ln29_fu_215_p2() {
    add_ln29_fu_215_p2 = (!filter_ptr_load_reg_294.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_bigint<32>(filter_ptr_load_reg_294.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void k732_hls_fir_filter_ip::thread_add_ln30_fu_220_p2() {
    add_ln30_fu_220_p2 = (!zext_ln26_reg_289.read().is_01() || !ap_const_lv9_1FF.is_01())? sc_lv<9>(): (sc_biguint<9>(zext_ln26_reg_289.read()) + sc_bigint<9>(ap_const_lv9_1FF));
}

void k732_hls_fir_filter_ip::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void k732_hls_fir_filter_ip::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void k732_hls_fir_filter_ip::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void k732_hls_fir_filter_ip::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void k732_hls_fir_filter_ip::thread_ap_CS_fsm_state46() {
    ap_CS_fsm_state46 = ap_CS_fsm.read()[45];
}

void k732_hls_fir_filter_ip::thread_ap_phi_mux_storemerge_phi_fu_144_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln19_reg_280.read()))) {
        ap_phi_mux_storemerge_phi_fu_144_p4 = trunc_ln36_fu_275_p1.read();
    } else {
        ap_phi_mux_storemerge_phi_fu_144_p4 = storemerge_reg_140.read();
    }
}

void k732_hls_fir_filter_ip::thread_buffer_in_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        buffer_in_address0 =  (sc_lv<8>) (zext_ln28_fu_210_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        buffer_in_address0 =  (sc_lv<8>) (sext_ln27_fu_180_p1.read());
    } else {
        buffer_in_address0 = "XXXXXXXX";
    }
}

void k732_hls_fir_filter_ip::thread_buffer_in_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        buffer_in_ce0 = ap_const_logic_1;
    } else {
        buffer_in_ce0 = ap_const_logic_0;
    }
}

void k732_hls_fir_filter_ip::thread_buffer_in_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln19_fu_152_p2.read()))) {
        buffer_in_we0 = ap_const_logic_1;
    } else {
        buffer_in_we0 = ap_const_logic_0;
    }
}

void k732_hls_fir_filter_ip::thread_empty_fu_185_p2() {
    empty_fu_185_p2 = (!fir_time.read().is_01() || !ap_const_lv8_C8.is_01())? sc_lv<1>(): (sc_biguint<8>(fir_time.read()) < sc_biguint<8>(ap_const_lv8_C8));
}

void k732_hls_fir_filter_ip::thread_grp_fu_244_ap_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln28_fu_199_p2.read(), ap_const_lv1_1))) {
        grp_fu_244_ap_start = ap_const_logic_1;
    } else {
        grp_fu_244_ap_start = ap_const_logic_0;
    }
}

void k732_hls_fir_filter_ip::thread_grp_fu_244_p1() {
    grp_fu_244_p1 =  (sc_lv<8>) (grp_fu_244_p10.read());
}

void k732_hls_fir_filter_ip::thread_grp_fu_244_p10() {
    grp_fu_244_p10 = esl_zext<40,8>(select_ln26_reg_284.read());
}

void k732_hls_fir_filter_ip::thread_i_fu_204_p2() {
    i_fu_204_p2 = (!i_0_reg_118.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(i_0_reg_118.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void k732_hls_fir_filter_ip::thread_icmp_ln19_fu_152_p2() {
    icmp_ln19_fu_152_p2 = (!fir_time.read().is_01() || !ap_const_lv8_0.is_01())? sc_lv<1>(): sc_lv<1>(fir_time.read() == ap_const_lv8_0);
}

void k732_hls_fir_filter_ip::thread_icmp_ln26_fu_158_p2() {
    icmp_ln26_fu_158_p2 = (!fir_time.read().is_01() || !ap_const_lv8_C8.is_01())? sc_lv<1>(): (sc_biguint<8>(fir_time.read()) > sc_biguint<8>(ap_const_lv8_C8));
}

void k732_hls_fir_filter_ip::thread_icmp_ln28_fu_199_p2() {
    icmp_ln28_fu_199_p2 = (!i_0_reg_118.read().is_01() || !select_ln28_reg_299.read().is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_118.read() == select_ln28_reg_299.read());
}

void k732_hls_fir_filter_ip::thread_icmp_ln30_fu_229_p2() {
    icmp_ln30_fu_229_p2 = (!add_ln29_fu_215_p2.read().is_01() || !sext_ln30_fu_225_p1.read().is_01())? sc_lv<1>(): (sc_bigint<32>(add_ln29_fu_215_p2.read()) > sc_bigint<32>(sext_ln30_fu_225_p1.read()));
}

void k732_hls_fir_filter_ip::thread_output_r() {
    output_r = ap_phi_mux_storemerge_phi_fu_144_p4.read();
}

void k732_hls_fir_filter_ip::thread_result_valid() {
    result_valid = esl_zext<8,1>(result_valid_flag.read());
}

void k732_hls_fir_filter_ip::thread_select_ln26_fu_164_p3() {
    select_ln26_fu_164_p3 = (!icmp_ln26_fu_158_p2.read()[0].is_01())? sc_lv<8>(): ((icmp_ln26_fu_158_p2.read()[0].to_bool())? ap_const_lv8_C8: fir_time.read());
}

void k732_hls_fir_filter_ip::thread_select_ln28_fu_191_p3() {
    select_ln28_fu_191_p3 = (!empty_fu_185_p2.read()[0].is_01())? sc_lv<8>(): ((empty_fu_185_p2.read()[0].to_bool())? fir_time.read(): ap_const_lv8_C8);
}

void k732_hls_fir_filter_ip::thread_sext_ln27_fu_180_p0() {
    sext_ln27_fu_180_p0 = filter_ptr.read();
}

void k732_hls_fir_filter_ip::thread_sext_ln27_fu_180_p1() {
    sext_ln27_fu_180_p1 = esl_sext<64,32>(sext_ln27_fu_180_p0.read());
}

void k732_hls_fir_filter_ip::thread_sext_ln30_fu_225_p1() {
    sext_ln30_fu_225_p1 = esl_sext<32,9>(add_ln30_fu_220_p2.read());
}

void k732_hls_fir_filter_ip::thread_tmp_add_value_fu_254_p2() {
    tmp_add_value_fu_254_p2 = (!zext_ln28_1_fu_250_p1.read().is_01() || !tmp_add_value_0_reg_106.read().is_01())? sc_lv<40>(): (sc_biguint<40>(zext_ln28_1_fu_250_p1.read()) + sc_biguint<40>(tmp_add_value_0_reg_106.read()));
}

void k732_hls_fir_filter_ip::thread_trunc_ln36_fu_275_p1() {
    trunc_ln36_fu_275_p1 = grp_fu_244_p2.read().range(32-1, 0);
}

void k732_hls_fir_filter_ip::thread_zext_ln26_fu_172_p1() {
    zext_ln26_fu_172_p1 = esl_zext<9,8>(select_ln26_fu_164_p3.read());
}

void k732_hls_fir_filter_ip::thread_zext_ln28_1_fu_250_p1() {
    zext_ln28_1_fu_250_p1 = esl_zext<40,32>(buffer_in_q0.read());
}

void k732_hls_fir_filter_ip::thread_zext_ln28_fu_210_p1() {
    zext_ln28_fu_210_p1 = esl_zext<64,8>(i_0_reg_118.read());
}

void k732_hls_fir_filter_ip::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln19_fu_152_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state46;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln28_fu_199_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_fsm_state37;
            break;
        case 68719476736 : 
            ap_NS_fsm = ap_ST_fsm_state38;
            break;
        case 137438953472 : 
            ap_NS_fsm = ap_ST_fsm_state39;
            break;
        case 274877906944 : 
            ap_NS_fsm = ap_ST_fsm_state40;
            break;
        case 549755813888 : 
            ap_NS_fsm = ap_ST_fsm_state41;
            break;
        case 1099511627776 : 
            ap_NS_fsm = ap_ST_fsm_state42;
            break;
        case 2199023255552 : 
            ap_NS_fsm = ap_ST_fsm_state43;
            break;
        case 4398046511104 : 
            ap_NS_fsm = ap_ST_fsm_state44;
            break;
        case 8796093022208 : 
            ap_NS_fsm = ap_ST_fsm_state45;
            break;
        case 17592186044416 : 
            ap_NS_fsm = ap_ST_fsm_state46;
            break;
        case 35184372088832 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<46>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void k732_hls_fir_filter_ip::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_r\" :  \"" << input_r.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"fir_time\" :  \"" << fir_time.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"output_r\" :  \"" << output_r.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"result_valid\" :  \"" << result_valid.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

