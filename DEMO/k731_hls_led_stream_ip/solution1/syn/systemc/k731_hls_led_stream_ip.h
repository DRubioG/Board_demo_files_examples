// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _k731_hls_led_stream_ip_HH_
#define _k731_hls_led_stream_ip_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct k731_hls_led_stream_ip : public sc_module {
    // Port declarations 3
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_out< sc_lv<4> > led_V;


    // Module declarations
    k731_hls_led_stream_ip(sc_module_name name);
    SC_HAS_PROCESS(k731_hls_led_stream_ip);

    ~k731_hls_led_stream_ip();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<32> > cnt_reg;
    sc_signal< sc_lv<32> > led_number;
    sc_signal< sc_lv<32> > ap_phi_mux_led_number_loc_0_phi_fu_54_p4;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<1> > icmp_ln10_fu_64_p2;
    sc_signal< sc_lv<32> > select_ln14_fu_93_p3;
    sc_signal< sc_lv<32> > add_ln10_fu_108_p2;
    sc_signal< sc_lv<1> > icmp_ln17_fu_120_p2;
    sc_signal< sc_lv<1> > icmp_ln21_fu_126_p2;
    sc_signal< sc_lv<1> > icmp_ln25_fu_132_p2;
    sc_signal< sc_lv<1> > icmp_ln29_fu_138_p2;
    sc_signal< sc_lv<1> > icmp_ln14_fu_81_p2;
    sc_signal< sc_lv<32> > add_ln14_fu_87_p2;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< bool > ap_condition_44;
    sc_signal< bool > ap_condition_48;
    static const sc_logic ap_const_logic_1;
    static const sc_lv<1> ap_ST_fsm_state1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<4> ap_const_lv4_4;
    static const sc_lv<4> ap_const_lv4_2;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<32> ap_const_lv32_2FAF080;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_logic ap_const_logic_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln10_fu_108_p2();
    void thread_add_ln14_fu_87_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_condition_44();
    void thread_ap_condition_48();
    void thread_ap_phi_mux_led_number_loc_0_phi_fu_54_p4();
    void thread_icmp_ln10_fu_64_p2();
    void thread_icmp_ln14_fu_81_p2();
    void thread_icmp_ln17_fu_120_p2();
    void thread_icmp_ln21_fu_126_p2();
    void thread_icmp_ln25_fu_132_p2();
    void thread_icmp_ln29_fu_138_p2();
    void thread_led_V();
    void thread_select_ln14_fu_93_p3();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
