// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "k731_hls_led_stream_ip.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic k731_hls_led_stream_ip::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<1> k731_hls_led_stream_ip::ap_ST_fsm_state1 = "1";
const sc_lv<32> k731_hls_led_stream_ip::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> k731_hls_led_stream_ip::ap_const_lv1_1 = "1";
const sc_lv<1> k731_hls_led_stream_ip::ap_const_lv1_0 = "0";
const sc_lv<4> k731_hls_led_stream_ip::ap_const_lv4_8 = "1000";
const sc_lv<4> k731_hls_led_stream_ip::ap_const_lv4_4 = "100";
const sc_lv<4> k731_hls_led_stream_ip::ap_const_lv4_2 = "10";
const sc_lv<4> k731_hls_led_stream_ip::ap_const_lv4_1 = "1";
const sc_lv<32> k731_hls_led_stream_ip::ap_const_lv32_2FAF080 = "10111110101111000010000000";
const sc_lv<32> k731_hls_led_stream_ip::ap_const_lv32_3 = "11";
const sc_lv<32> k731_hls_led_stream_ip::ap_const_lv32_1 = "1";
const sc_lv<32> k731_hls_led_stream_ip::ap_const_lv32_2 = "10";
const sc_logic k731_hls_led_stream_ip::ap_const_logic_0 = sc_dt::Log_0;
const bool k731_hls_led_stream_ip::ap_const_boolean_1 = true;

k731_hls_led_stream_ip::k731_hls_led_stream_ip(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln10_fu_108_p2);
    sensitive << ( cnt_reg );

    SC_METHOD(thread_add_ln14_fu_87_p2);
    sensitive << ( led_number );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_condition_44);
    sensitive << ( icmp_ln17_fu_120_p2 );
    sensitive << ( icmp_ln21_fu_126_p2 );
    sensitive << ( icmp_ln25_fu_132_p2 );
    sensitive << ( icmp_ln29_fu_138_p2 );

    SC_METHOD(thread_ap_condition_48);
    sensitive << ( icmp_ln17_fu_120_p2 );
    sensitive << ( icmp_ln21_fu_126_p2 );
    sensitive << ( icmp_ln25_fu_132_p2 );

    SC_METHOD(thread_ap_phi_mux_led_number_loc_0_phi_fu_54_p4);
    sensitive << ( led_number );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( icmp_ln10_fu_64_p2 );
    sensitive << ( select_ln14_fu_93_p3 );

    SC_METHOD(thread_icmp_ln10_fu_64_p2);
    sensitive << ( cnt_reg );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_icmp_ln14_fu_81_p2);
    sensitive << ( led_number );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( icmp_ln10_fu_64_p2 );

    SC_METHOD(thread_icmp_ln17_fu_120_p2);
    sensitive << ( ap_phi_mux_led_number_loc_0_phi_fu_54_p4 );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_icmp_ln21_fu_126_p2);
    sensitive << ( ap_phi_mux_led_number_loc_0_phi_fu_54_p4 );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( icmp_ln17_fu_120_p2 );

    SC_METHOD(thread_icmp_ln25_fu_132_p2);
    sensitive << ( ap_phi_mux_led_number_loc_0_phi_fu_54_p4 );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( icmp_ln17_fu_120_p2 );
    sensitive << ( icmp_ln21_fu_126_p2 );

    SC_METHOD(thread_icmp_ln29_fu_138_p2);
    sensitive << ( ap_phi_mux_led_number_loc_0_phi_fu_54_p4 );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( icmp_ln17_fu_120_p2 );
    sensitive << ( icmp_ln21_fu_126_p2 );
    sensitive << ( icmp_ln25_fu_132_p2 );

    SC_METHOD(thread_led_V);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( icmp_ln17_fu_120_p2 );
    sensitive << ( icmp_ln21_fu_126_p2 );
    sensitive << ( ap_condition_44 );
    sensitive << ( ap_condition_48 );

    SC_METHOD(thread_select_ln14_fu_93_p3);
    sensitive << ( icmp_ln14_fu_81_p2 );
    sensitive << ( add_ln14_fu_87_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    cnt_reg = "00000000000000000000000000000000";
    led_number = "00000000000000000000000000000000";
    ap_CS_fsm = "1";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "k731_hls_led_stream_ip_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, led_V, "(port)led_V");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, cnt_reg, "cnt_reg");
    sc_trace(mVcdFile, led_number, "led_number");
    sc_trace(mVcdFile, ap_phi_mux_led_number_loc_0_phi_fu_54_p4, "ap_phi_mux_led_number_loc_0_phi_fu_54_p4");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, icmp_ln10_fu_64_p2, "icmp_ln10_fu_64_p2");
    sc_trace(mVcdFile, select_ln14_fu_93_p3, "select_ln14_fu_93_p3");
    sc_trace(mVcdFile, add_ln10_fu_108_p2, "add_ln10_fu_108_p2");
    sc_trace(mVcdFile, icmp_ln17_fu_120_p2, "icmp_ln17_fu_120_p2");
    sc_trace(mVcdFile, icmp_ln21_fu_126_p2, "icmp_ln21_fu_126_p2");
    sc_trace(mVcdFile, icmp_ln25_fu_132_p2, "icmp_ln25_fu_132_p2");
    sc_trace(mVcdFile, icmp_ln29_fu_138_p2, "icmp_ln29_fu_138_p2");
    sc_trace(mVcdFile, icmp_ln14_fu_81_p2, "icmp_ln14_fu_81_p2");
    sc_trace(mVcdFile, add_ln14_fu_87_p2, "add_ln14_fu_87_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_condition_44, "ap_condition_44");
    sc_trace(mVcdFile, ap_condition_48, "ap_condition_48");
#endif

    }
    mHdltvinHandle.open("k731_hls_led_stream_ip.hdltvin.dat");
    mHdltvoutHandle.open("k731_hls_led_stream_ip.hdltvout.dat");
}

k731_hls_led_stream_ip::~k731_hls_led_stream_ip() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void k731_hls_led_stream_ip::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        if (esl_seteq<1,1,1>(icmp_ln10_fu_64_p2.read(), ap_const_lv1_1)) {
            cnt_reg = add_ln10_fu_108_p2.read();
        } else if (esl_seteq<1,1,1>(icmp_ln10_fu_64_p2.read(), ap_const_lv1_0)) {
            cnt_reg = ap_const_lv32_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(icmp_ln10_fu_64_p2.read(), ap_const_lv1_0))) {
        led_number = select_ln14_fu_93_p3.read();
    }
}

void k731_hls_led_stream_ip::thread_add_ln10_fu_108_p2() {
    add_ln10_fu_108_p2 = (!cnt_reg.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(cnt_reg.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void k731_hls_led_stream_ip::thread_add_ln14_fu_87_p2() {
    add_ln14_fu_87_p2 = (!led_number.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(led_number.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void k731_hls_led_stream_ip::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void k731_hls_led_stream_ip::thread_ap_condition_44() {
    ap_condition_44 = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln17_fu_120_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln21_fu_126_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln25_fu_132_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln29_fu_138_p2.read()));
}

void k731_hls_led_stream_ip::thread_ap_condition_48() {
    ap_condition_48 = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln17_fu_120_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln21_fu_126_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln25_fu_132_p2.read()));
}

void k731_hls_led_stream_ip::thread_ap_phi_mux_led_number_loc_0_phi_fu_54_p4() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        if (esl_seteq<1,1,1>(icmp_ln10_fu_64_p2.read(), ap_const_lv1_0)) {
            ap_phi_mux_led_number_loc_0_phi_fu_54_p4 = select_ln14_fu_93_p3.read();
        } else if (esl_seteq<1,1,1>(icmp_ln10_fu_64_p2.read(), ap_const_lv1_1)) {
            ap_phi_mux_led_number_loc_0_phi_fu_54_p4 = led_number.read();
        } else {
            ap_phi_mux_led_number_loc_0_phi_fu_54_p4 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        ap_phi_mux_led_number_loc_0_phi_fu_54_p4 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void k731_hls_led_stream_ip::thread_icmp_ln10_fu_64_p2() {
    icmp_ln10_fu_64_p2 = (!cnt_reg.read().is_01() || !ap_const_lv32_2FAF080.is_01())? sc_lv<1>(): (sc_bigint<32>(cnt_reg.read()) < sc_bigint<32>(ap_const_lv32_2FAF080));
}

void k731_hls_led_stream_ip::thread_icmp_ln14_fu_81_p2() {
    icmp_ln14_fu_81_p2 = (!led_number.read().is_01() || !ap_const_lv32_3.is_01())? sc_lv<1>(): (sc_bigint<32>(led_number.read()) < sc_bigint<32>(ap_const_lv32_3));
}

void k731_hls_led_stream_ip::thread_icmp_ln17_fu_120_p2() {
    icmp_ln17_fu_120_p2 = (!ap_phi_mux_led_number_loc_0_phi_fu_54_p4.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_led_number_loc_0_phi_fu_54_p4.read() == ap_const_lv32_0);
}

void k731_hls_led_stream_ip::thread_icmp_ln21_fu_126_p2() {
    icmp_ln21_fu_126_p2 = (!ap_phi_mux_led_number_loc_0_phi_fu_54_p4.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_led_number_loc_0_phi_fu_54_p4.read() == ap_const_lv32_1);
}

void k731_hls_led_stream_ip::thread_icmp_ln25_fu_132_p2() {
    icmp_ln25_fu_132_p2 = (!ap_phi_mux_led_number_loc_0_phi_fu_54_p4.read().is_01() || !ap_const_lv32_2.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_led_number_loc_0_phi_fu_54_p4.read() == ap_const_lv32_2);
}

void k731_hls_led_stream_ip::thread_icmp_ln29_fu_138_p2() {
    icmp_ln29_fu_138_p2 = (!ap_phi_mux_led_number_loc_0_phi_fu_54_p4.read().is_01() || !ap_const_lv32_3.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_led_number_loc_0_phi_fu_54_p4.read() == ap_const_lv32_3);
}

void k731_hls_led_stream_ip::thread_led_V() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln17_fu_120_p2.read())) {
            led_V = ap_const_lv4_1;
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln17_fu_120_p2.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln21_fu_126_p2.read()))) {
            led_V = ap_const_lv4_2;
        } else if (esl_seteq<1,1,1>(ap_condition_48.read(), ap_const_boolean_1)) {
            led_V = ap_const_lv4_4;
        } else if (esl_seteq<1,1,1>(ap_condition_44.read(), ap_const_boolean_1)) {
            led_V = ap_const_lv4_8;
        } else {
            led_V =  (sc_lv<4>) ("XXXX");
        }
    } else {
        led_V =  (sc_lv<4>) ("XXXX");
    }
}

void k731_hls_led_stream_ip::thread_select_ln14_fu_93_p3() {
    select_ln14_fu_93_p3 = (!icmp_ln14_fu_81_p2.read()[0].is_01())? sc_lv<32>(): ((icmp_ln14_fu_81_p2.read()[0].to_bool())? add_ln14_fu_87_p2.read(): ap_const_lv32_0);
}

void k731_hls_led_stream_ip::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<1>) ("X");
            break;
    }
}

void k731_hls_led_stream_ip::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"led_V\" :  \"" << led_V.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

