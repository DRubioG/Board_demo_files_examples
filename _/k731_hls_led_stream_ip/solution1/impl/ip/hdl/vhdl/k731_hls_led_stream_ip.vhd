-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity k731_hls_led_stream_ip is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    led_V : OUT STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of k731_hls_led_stream_ip is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "k731_hls_led_stream_ip,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k325t-ffg676-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.167000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=65,HLS_SYN_LUT=265,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_2FAF080 : STD_LOGIC_VECTOR (31 downto 0) := "00000010111110101111000010000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal cnt_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal led_number : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_phi_mux_led_number_loc_0_phi_fu_54_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln10_fu_64_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln14_fu_93_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln10_fu_108_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln17_fu_120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_fu_126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_fu_132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_fu_138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_fu_81_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln14_fu_87_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_44 : BOOLEAN;
    signal ap_condition_48 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    cnt_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                if ((icmp_ln10_fu_64_p2 = ap_const_lv1_1)) then 
                    cnt_reg <= add_ln10_fu_108_p2;
                elsif ((icmp_ln10_fu_64_p2 = ap_const_lv1_0)) then 
                    cnt_reg <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_64_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                led_number <= select_ln14_fu_93_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln10_fu_108_p2 <= std_logic_vector(unsigned(cnt_reg) + unsigned(ap_const_lv32_1));
    add_ln14_fu_87_p2 <= std_logic_vector(unsigned(led_number) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_condition_44_assign_proc : process(icmp_ln17_fu_120_p2, icmp_ln21_fu_126_p2, icmp_ln25_fu_132_p2, icmp_ln29_fu_138_p2)
    begin
                ap_condition_44 <= ((icmp_ln25_fu_132_p2 = ap_const_lv1_0) and (icmp_ln21_fu_126_p2 = ap_const_lv1_0) and (icmp_ln17_fu_120_p2 = ap_const_lv1_0) and (icmp_ln29_fu_138_p2 = ap_const_lv1_1));
    end process;


    ap_condition_48_assign_proc : process(icmp_ln17_fu_120_p2, icmp_ln21_fu_126_p2, icmp_ln25_fu_132_p2)
    begin
                ap_condition_48 <= ((icmp_ln21_fu_126_p2 = ap_const_lv1_0) and (icmp_ln17_fu_120_p2 = ap_const_lv1_0) and (icmp_ln25_fu_132_p2 = ap_const_lv1_1));
    end process;


    ap_phi_mux_led_number_loc_0_phi_fu_54_p4_assign_proc : process(led_number, ap_CS_fsm_state1, icmp_ln10_fu_64_p2, select_ln14_fu_93_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((icmp_ln10_fu_64_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_led_number_loc_0_phi_fu_54_p4 <= select_ln14_fu_93_p3;
            elsif ((icmp_ln10_fu_64_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_led_number_loc_0_phi_fu_54_p4 <= led_number;
            else 
                ap_phi_mux_led_number_loc_0_phi_fu_54_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_led_number_loc_0_phi_fu_54_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln10_fu_64_p2 <= "1" when (signed(cnt_reg) < signed(ap_const_lv32_2FAF080)) else "0";
    icmp_ln14_fu_81_p2 <= "1" when (signed(led_number) < signed(ap_const_lv32_3)) else "0";
    icmp_ln17_fu_120_p2 <= "1" when (ap_phi_mux_led_number_loc_0_phi_fu_54_p4 = ap_const_lv32_0) else "0";
    icmp_ln21_fu_126_p2 <= "1" when (ap_phi_mux_led_number_loc_0_phi_fu_54_p4 = ap_const_lv32_1) else "0";
    icmp_ln25_fu_132_p2 <= "1" when (ap_phi_mux_led_number_loc_0_phi_fu_54_p4 = ap_const_lv32_2) else "0";
    icmp_ln29_fu_138_p2 <= "1" when (ap_phi_mux_led_number_loc_0_phi_fu_54_p4 = ap_const_lv32_3) else "0";

    led_V_assign_proc : process(ap_CS_fsm_state1, icmp_ln17_fu_120_p2, icmp_ln21_fu_126_p2, ap_condition_44, ap_condition_48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((icmp_ln17_fu_120_p2 = ap_const_lv1_1)) then 
                led_V <= ap_const_lv4_1;
            elsif (((icmp_ln17_fu_120_p2 = ap_const_lv1_0) and (icmp_ln21_fu_126_p2 = ap_const_lv1_1))) then 
                led_V <= ap_const_lv4_2;
            elsif ((ap_const_boolean_1 = ap_condition_48)) then 
                led_V <= ap_const_lv4_4;
            elsif ((ap_const_boolean_1 = ap_condition_44)) then 
                led_V <= ap_const_lv4_8;
            else 
                led_V <= "XXXX";
            end if;
        else 
            led_V <= "XXXX";
        end if; 
    end process;

    select_ln14_fu_93_p3 <= 
        add_ln14_fu_87_p2 when (icmp_ln14_fu_81_p2(0) = '1') else 
        ap_const_lv32_0;
end behav;
